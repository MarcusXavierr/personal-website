<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Meu website</title><link>https://marcusxavier.dev/posts/</link><description>All Posts | Meu website</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Mon, 28 Nov 2022 21:28:07 -0300</lastBuildDate><atom:link href="https://marcusxavier.dev/posts/" rel="self" type="application/rss+xml"/><item><title>Brincando Com Reduce Parte 2</title><link>https://marcusxavier.dev/posts/brincando-com-reduce-pt2/</link><pubDate>Mon, 28 Nov 2022 21:28:07 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/brincando-com-reduce-pt2/</guid><description>Eu dei uma relida no artigo sobre reduce que tinha publicado anteriormente, e percebi algumas coisas que eu gostaria de adicionar, vamos lá.
Tipos de retorno no reduce O reduce recebe uma lista do tipo X e geralmente te retorna um único valor do tipo X, vamos dizer que isso é do tipo [X] -&amp;gt; X, onde X pode ser um objeto, um número, qualquer coisa. Mas isso não é obrigatório.</description></item><item><title>Clean Code: Classes</title><link>https://marcusxavier.dev/posts/clean-code-part6/</link><pubDate>Tue, 15 Nov 2022 15:33:55 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part6/</guid><description>TL;DR Classes deveriam ser pequenas, deveriam fazer somente uma coisa e deveriam ter somente um motivo para mudar
Classes deveriam ser pequenas Existe um milhão de motivos para odiar classes grandes: o código fica com aspecto de bagunçado, existem literalmente dezenas de métodos que podem fuçar em todos os atributos da classe, o que aumenta a chance de algum erro passar despercebido, e também é uma porcaria se &amp;ldquo;mover&amp;rdquo; na classe, você pula pra um método privado da classe, e vai pra 1000 linhas abaixo de onde você estava.</description></item><item><title>Clean Code: Testes</title><link>https://marcusxavier.dev/posts/clean-code-part5/</link><pubDate>Sat, 12 Nov 2022 20:46:15 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part5/</guid><description>Falar que testes são importantes para a mantenabilidade do código é chover no molhado, mas é sempre bom ter em mente que nem todo teste trás tanto benefício assim. Testes que quebram o tempo todo, são difíceis de estender, e complicados de entender, são mais prejudiciais do que benéficos para a sua codebase, e o autor explica o porquê nesse trecho.
&amp;ldquo;Ter testes &amp;lsquo;sujos&amp;rsquo; é o equivalente ou até mesmo pior do que não ter testes.</description></item><item><title>Clean Code: Formatação</title><link>https://marcusxavier.dev/posts/clean-code-part4/</link><pubDate>Fri, 11 Nov 2022 20:25:36 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part4/</guid><description>Introdução A primeira impressão que tive sobre o capítulo sobre formatação é que ele só teria obviedades, afinal, formatar código não tem muito segredo, mas eu vi algumas provocações interessantes que gostaria de compartilhar.
Por exemplo, se eu perguntasse que código funcionando é a coisa mais importante no trabalho de um Programador, a grande maioria das pessoas diria que sim. E o uncle bob no começo do capítulo lança uma provocação e diz que isso não é verdade.</description></item><item><title>Clean Code: Fazendo bom uso das funções | Parte 2</title><link>https://marcusxavier.dev/posts/clean-code-part3/</link><pubDate>Tue, 20 Sep 2022 22:44:22 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part3/</guid><description>Esse artigo é a continuação do tema &amp;ldquo;funções&amp;rdquo;, por favor leia a parte 1 primeiro.
Um nível de abstração por função Para garantir que a nossa função faz somente uma coisa, nós precisamos ter certeza que os pedaços de código dentro da função estão no mesmo nível de abstração. O que eu quero dizer com isso é que se uma parte da sua função está cuidando de coisas bem abstratas, não faz muito sentido misturar isso com detalhes de implementação logo abaixo.</description></item><item><title>Clean Code: Fazendo bom uso das funções | Parte 1</title><link>https://marcusxavier.dev/posts/clean-code-part2/</link><pubDate>Sat, 17 Sep 2022 12:17:03 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part2/</guid><description>Parafraseando o próprio uncle bob, funções são a primeira linha de organização de qualquer programa. Ou seja, na maioria das linguagens, uma função (ou método) é a &amp;ldquo;menor&amp;rdquo; forma de organizar seu código.
Você pode ter classes, interfaces e tudo mais, mas dentro disso tudo estarão funções mantendo sua codebase organizada. Ou bagunçada, depende de como você as usa. Eu diria que essa é uma das partes mais importantes dessa série de artigos justamente por isso.</description></item><item><title>Clean Code: Escolhendo bons nomes</title><link>https://marcusxavier.dev/posts/clean-code-part1/</link><pubDate>Sat, 06 Aug 2022 10:10:58 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part1/</guid><description>Bons nomes são demasiadamente importantes no desenvolvimento de software e este artigo visa cobrir as melhores dicas do livro Clean Code sobre a escolha de bons nomes</description></item><item><title>Brincando Com A Função Reduce</title><link>https://marcusxavier.dev/posts/brincando-com-reduce/</link><pubDate>Fri, 05 Aug 2022 16:38:45 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/brincando-com-reduce/</guid><description>&lt;div class="featured-image">
&lt;img src="https://i.ibb.co/xCGThbJ/reduce.jpg" referrerpolicy="no-referrer">
&lt;/div>A função reduce é bastante incompreendida por muitos programadores. Tendo isso em vista hoje vamos mexer um pouco com essa função e implementarmos a nossa própria versão para clarificar mais o que essa função faz debaixo dos panos</description></item><item><title>Guia fundamental da programação orientada a objetos - Final</title><link>https://marcusxavier.dev/posts/guia-poo-part3/</link><pubDate>Mon, 01 Aug 2022 09:30:48 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part3/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fz6edMns--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a7dahxhlb0eqflvn8d7.jpg" referrerpolicy="no-referrer">
&lt;/div>Agora que nós já vimos os pilares da POO e a sua importância, está na hora de abordar mais alguns aspectos importantes de orientação a objetos neste último artigo. Vamos falar um pouco sobre classes abstratas, interfaces e classes finais (conhecida como classe selada em algumas linguagens).
O que são classes abstratas? Elas são classes que não podem ser instanciadas. Ou seja, você não pode criar objetos a partir de uma classe abstrata.</description></item><item><title>Guia fundamental da programação orientada a objetos - Parte 2 | Os pilares</title><link>https://marcusxavier.dev/posts/guia-poo-part2/</link><pubDate>Mon, 01 Aug 2022 09:29:19 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part2/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JmAHtL5a--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6431uumz3l7wn7vtxs56.jpg" referrerpolicy="no-referrer">
&lt;/div>É impossível falar de programação orientada a objetos sem citar seus famosos quatro pilares. Seguir esses pilares é muito importante para que você possa conseguir todos os maravilhosos benefícios da POO. No artigo de hoje eu vou falar exclusivamente sobre esses pilares, e sempre que pertinente vou exemplificar com código e imagens. Seria ótimo que você deixasse seu feedback nos comentários.
Quais são os pilares da POO? A POO possui alguns pilares que devem ser seguidos para que possamos começar a obter os benefícios oferecidos por esse paradigma da maneira mais correta possível.</description></item></channel></rss>
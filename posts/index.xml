<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Meu website</title><link>https://marcusxavier.dev/posts/</link><description>All Posts | Meu website</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Fri, 11 Nov 2022 20:25:36 -0300</lastBuildDate><atom:link href="https://marcusxavier.dev/posts/" rel="self" type="application/rss+xml"/><item><title>Clean Code: Formata√ß√£o</title><link>https://marcusxavier.dev/posts/clean-code-part4/</link><pubDate>Fri, 11 Nov 2022 20:25:36 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part4/</guid><description>Introdu√ß√£o A primeira impress√£o que tive sobre o cap√≠tulo sobre formata√ß√£o √© que ele s√≥ teria obviedades, afinal, formatar c√≥digo n√£o tem muito segredo, mas eu vi algumas provoca√ß√µes interessantes que gostaria de compartilhar. Por exemplo, se eu perguntasse que c√≥digo funcionando √© a coisa mais importante no trabalho de um Programador, a grande maioria das pessoas diria que sim. E o uncle bob no come√ßo do cap√≠tulo lan√ßa uma provoca√ß√£o e diz que isso n√£o √© verdade.</description></item><item><title>Clean Code: Fazendo bom uso das fun√ß√µes | Parte 2</title><link>https://marcusxavier.dev/posts/clean-code-part3/</link><pubDate>Tue, 20 Sep 2022 22:44:22 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part3/</guid><description>Introdu√ß√£o Passei alguns minutos pensando em como escrever uma introdu√ß√£o pra esse artigo, que √© a continua√ß√£o de um assunto que j√° foi introduzido anteriormente, mas acabei percebendo que isso n√£o seria necess√°rio, pois essa segunda introdu√ß√£o serviria somente para que o leitor n√£o esbarrasse logo de cara com conte√∫do do artigo de forma abrupta, e esse par√°grafo de lero lero serviu perfeitamente para isso üòÅ. Agora, falando s√©rio, esse artigo s√≥ far√° sentido se voc√™ ler a parte 1 dele, por favor, leia.</description></item><item><title>Clean Code: Fazendo bom uso das fun√ß√µes | Parte 1</title><link>https://marcusxavier.dev/posts/clean-code-part2/</link><pubDate>Sat, 17 Sep 2022 12:17:03 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part2/</guid><description>Parafraseando o pr√≥prio uncle bob, fun√ß√µes s√£o a primeira linha de organiza√ß√£o de qualquer programa. Ou seja, na maioria das linguagens, uma fun√ß√£o (ou m√©todo) √© a &amp;ldquo;menor&amp;rdquo; forma de organizar seu c√≥digo.
Voc√™ pode ter classes, interfaces e tudo mais, mas dentro disso tudo estar√£o fun√ß√µes mantendo sua codebase organizada. Ou bagun√ßada, depende de como voc√™ as usa. Eu diria que essa √© uma das partes mais importantes dessa s√©rie de artigos justamente por isso.</description></item><item><title>Clean Code: Escolhendo bons nomes</title><link>https://marcusxavier.dev/posts/clean-code-part1/</link><pubDate>Sat, 06 Aug 2022 10:10:58 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part1/</guid><description>Bons nomes s√£o demasiadamente importantes no desenvolvimento de software e este artigo visa cobrir as melhores dicas do livro Clean Code sobre a escolha de bons nomes</description></item><item><title>Brincando Com A Fun√ß√£o Reduce</title><link>https://marcusxavier.dev/posts/brincando-com-reduce/</link><pubDate>Fri, 05 Aug 2022 16:38:45 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/brincando-com-reduce/</guid><description>&lt;div class="featured-image">
&lt;img src="https://i.ibb.co/xCGThbJ/reduce.jpg" referrerpolicy="no-referrer">
&lt;/div>A fun√ß√£o reduce √© bastante incompreendida por muitos programadores. Tendo isso em vista hoje vamos mexer um pouco com essa fun√ß√£o e implementarmos a nossa pr√≥pria vers√£o para clarificar mais o que essa fun√ß√£o faz debaixo dos panos</description></item><item><title>Guia fundamental da programa√ß√£o orientada a objetos - Final</title><link>https://marcusxavier.dev/posts/guia-poo-part3/</link><pubDate>Mon, 01 Aug 2022 09:30:48 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part3/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fz6edMns--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a7dahxhlb0eqflvn8d7.jpg" referrerpolicy="no-referrer">
&lt;/div>Agora que n√≥s j√° vimos os pilares da POO e a sua import√¢ncia, est√° na hora de abordar mais alguns aspectos importantes de orienta√ß√£o a objetos neste √∫ltimo artigo. Vamos falar um pouco sobre classes abstratas, interfaces e classes finais (conhecida como classe selada em algumas linguagens).
O que s√£o classes abstratas? Elas s√£o classes que n√£o podem ser instanciadas. Ou seja, voc√™ n√£o pode criar objetos a partir de uma classe abstrata.</description></item><item><title>Guia fundamental da programa√ß√£o orientada a objetos - Parte 2 | Os pilares</title><link>https://marcusxavier.dev/posts/guia-poo-part2/</link><pubDate>Mon, 01 Aug 2022 09:29:19 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part2/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JmAHtL5a--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6431uumz3l7wn7vtxs56.jpg" referrerpolicy="no-referrer">
&lt;/div>√â imposs√≠vel falar de programa√ß√£o orientada a objetos sem citar seus famosos quatro pilares. Seguir esses pilares √© muito importante para que voc√™ possa conseguir todos os maravilhosos benef√≠cios da POO. No artigo de hoje eu vou falar exclusivamente sobre esses pilares, e sempre que pertinente vou exemplificar com c√≥digo e imagens. Seria √≥timo que voc√™ deixasse seu feedback nos coment√°rios.
Quais s√£o os pilares da POO? A POO possui alguns pilares que devem ser seguidos para que possamos come√ßar a obter os benef√≠cios oferecidos por esse paradigma da maneira mais correta poss√≠vel.</description></item><item><title>Guia fundamental da programa√ß√£o orientada a objetos - Parte 1</title><link>https://marcusxavier.dev/posts/guia-poo-part1/</link><pubDate>Sun, 31 Jul 2022 19:09:07 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part1/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tId2cKmG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42a7ietajfinnnu15jb8.jpg" referrerpolicy="no-referrer">
            </div>A ideia dessa s√©rie de posts √© cobrir as partes que eu considero mais fundamentais na orienta√ß√£o a objetos, e no artigo de hoje iremos come√ßar com os conceitos mais b√°sicos desse paradigma.
Afinal, o que s√£o classes e objetos? Explicando de forma resumida, objetos podem ser considerados estruturas que armazenam dados (propriedades), a√ß√µes (m√©todos) e o estado atual desse objeto, ent√£o podem ter dois objetos do mesmo &ldquo;tipo&rdquo; com valores diferentes em suas propriedades, pois eles t√™m estados diferentes.]]></description></item><item><title>Hello world</title><link>https://marcusxavier.dev/posts/hello/</link><pubDate>Sun, 31 Jul 2022 18:56:00 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/hello/</guid><description>Bem vindo ao meu site pessoal Esse √© o meu primeiro post no meu site. Em breve postarei mais coisas</description></item></channel></rss>
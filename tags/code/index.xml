<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code - Tag - Meu website</title><link>https://marcusxavier.dev/tags/code/</link><description>Code - Tag - Meu website</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Sat, 06 Aug 2022 10:10:58 -0300</lastBuildDate><atom:link href="https://marcusxavier.dev/tags/code/" rel="self" type="application/rss+xml"/><item><title>Clean Code: Escolhendo bons nomes</title><link>https://marcusxavier.dev/posts/clean-code-part1/</link><pubDate>Sat, 06 Aug 2022 10:10:58 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/clean-code-part1/</guid><description>Bons nomes são demasiadamente importantes no desenvolvimento de software e este artigo visa cobrir as melhores dicas do livro Clean Code sobre a escolha de bons nomes</description></item><item><title>Brincando Com A Função Reduce</title><link>https://marcusxavier.dev/posts/brincando-com-reduce/</link><pubDate>Fri, 05 Aug 2022 16:38:45 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/brincando-com-reduce/</guid><description>&lt;div class="featured-image">
&lt;img src="https://i.ibb.co/xCGThbJ/reduce.jpg" referrerpolicy="no-referrer">
&lt;/div>A função reduce é bastante incompreendida por muitos programadores. Tendo isso em vista hoje vamos mexer um pouco com essa função e implementarmos a nossa própria versão para clarificar mais o que essa função faz debaixo dos panos</description></item><item><title>Guia fundamental da programação orientada a objetos - Final</title><link>https://marcusxavier.dev/posts/guia-poo-part3/</link><pubDate>Mon, 01 Aug 2022 09:30:48 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part3/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fz6edMns--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a7dahxhlb0eqflvn8d7.jpg" referrerpolicy="no-referrer">
&lt;/div>Agora que nós já vimos os pilares da POO e a sua importância, está na hora de abordar mais alguns aspectos importantes de orientação a objetos neste último artigo. Vamos falar um pouco sobre classes abstratas, interfaces e classes finais (conhecida como classe selada em algumas linguagens).
O que são classes abstratas? Elas são classes que não podem ser instanciadas. Ou seja, você não pode criar objetos a partir de uma classe abstrata.</description></item><item><title>Guia fundamental da programação orientada a objetos - Parte 2 | Os pilares</title><link>https://marcusxavier.dev/posts/guia-poo-part2/</link><pubDate>Mon, 01 Aug 2022 09:29:19 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part2/</guid><description>&lt;div class="featured-image">
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JmAHtL5a--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6431uumz3l7wn7vtxs56.jpg" referrerpolicy="no-referrer">
&lt;/div>É impossível falar de programação orientada a objetos sem citar seus famosos quatro pilares. Seguir esses pilares é muito importante para que você possa conseguir todos os maravilhosos benefícios da POO. No artigo de hoje eu vou falar exclusivamente sobre esses pilares, e sempre que pertinente vou exemplificar com código e imagens. Seria ótimo que você deixasse seu feedback nos comentários.
Quais são os pilares da POO? A POO possui alguns pilares que devem ser seguidos para que possamos começar a obter os benefícios oferecidos por esse paradigma da maneira mais correta possível.</description></item><item><title>Guia fundamental da programação orientada a objetos - Parte 1</title><link>https://marcusxavier.dev/posts/guia-poo-part1/</link><pubDate>Sun, 31 Jul 2022 19:09:07 -0300</pubDate><author>Marcus Xavier</author><guid>https://marcusxavier.dev/posts/guia-poo-part1/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tId2cKmG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42a7ietajfinnnu15jb8.jpg" referrerpolicy="no-referrer">
            </div>A ideia dessa série de posts é cobrir as partes que eu considero mais fundamentais na orientação a objetos, e no artigo de hoje iremos começar com os conceitos mais básicos desse paradigma.
Afinal, o que são classes e objetos? Explicando de forma resumida, objetos podem ser considerados estruturas que armazenam dados (propriedades), ações (métodos) e o estado atual desse objeto, então podem ter dois objetos do mesmo &ldquo;tipo&rdquo; com valores diferentes em suas propriedades, pois eles têm estados diferentes.]]></description></item></channel></rss>